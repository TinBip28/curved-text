import streamlit as st
import cv2
import numpy as np
import matplotlib.pyplot as plt
from io import BytesIO
import os
from PIL import Image
import tempfile
from dewarp_rectify import uncurve_text_tight, uncurve_text
from dw_calculate import calculate_dw_for_defined_pair

# Set page configuration
st.set_page_config(
    page_title="C√¥ng C·ª• Ch·ªânh S·ª≠a VƒÉn B·∫£n Cong",
    page_icon="üìù",
    layout="wide"
)

# App title and description
st.title("C√¥ng C·ª• Ch·ªânh S·ª≠a VƒÉn B·∫£n Cong")
st.markdown("C√¥ng c·ª• n√†y gi√∫p b·∫°n l√†m th·∫≥ng v√† cƒÉn ch·ªânh vƒÉn b·∫£n cong trong h√¨nh ·∫£nh.")
# Sidebar for parameters
st.sidebar.header("Th√¥ng S·ªë")

# Image selection
st.sidebar.subheader("Ch·ªçn H√¨nh ·∫¢nh")
image_source = st.sidebar.radio(
    "Ch·ªçn ngu·ªìn h√¨nh ·∫£nh:",
    ["T·∫£i H√¨nh ·∫¢nh L√™n", "S·ª≠ D·ª•ng H√¨nh ·∫¢nh M·∫´u"]
)

if image_source == "T·∫£i H√¨nh ·∫¢nh L√™n":
    uploaded_file = st.sidebar.file_uploader("T·∫£i l√™n m·ªôt h√¨nh ·∫£nh", type=["jpg", "jpeg", "png"])
    if uploaded_file is not None:
        # Create images directory if it doesn't exist
        image_dir = "images"
        os.makedirs(image_dir, exist_ok=True)
        
        # Save the uploaded file to the images directory
        uploaded_filename = uploaded_file.name
        input_path = os.path.join(image_dir, uploaded_filename)
        
        # Write the uploaded file to the images directory
        with open(input_path, "wb") as f:
            f.write(uploaded_file.getvalue())
        
        # Display the uploaded image
        st.sidebar.image(uploaded_file, caption="H√¨nh ·∫¢nh ƒê√£ T·∫£i L√™n", use_column_width=True)
        st.sidebar.success(f"üìÅ ƒê√£ l∆∞u v√†o: `{input_path}`")
    else:
        st.warning("Vui l√≤ng t·∫£i l√™n m·ªôt h√¨nh ·∫£nh ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
        st.stop()
else:
    # List available sample images
    image_dir = "images"
    sample_images = [f for f in os.listdir(image_dir) if f.endswith((".png", ".jpg", ".jpeg"))]
    selected_image = st.sidebar.selectbox("Ch·ªçn m·ªôt h√¨nh ·∫£nh m·∫´u:", sample_images)
    input_path = os.path.join(image_dir, selected_image)
    
    # Display the selected sample image
    st.sidebar.image(input_path, caption=f"H√¨nh ·∫¢nh M·∫´u: {selected_image}", use_column_width=True)

# Algorithm parameters
st.sidebar.subheader("Th√¥ng S·ªë Thu·∫≠t To√°n")

# Parameters for the first stage (uncurve_text_tight)
st.sidebar.markdown("#### Th√¥ng S·ªë Giai ƒêo·∫°n 1")
n1_splines = st.sidebar.slider("S·ªë ƒë∆∞·ªùng cong spline cho ph√°t hi·ªán ƒë∆∞·ªùng vƒÉn b·∫£n:", 3, 20, 6)
arc_equal_tight = st.sidebar.checkbox("S·ª≠ d·ª•ng chu·∫©n h√≥a chi·ªÅu d√†i cung cho giai ƒëo·∫°n 1", True)

# Parameters for the second stage (uncurve_text)
st.sidebar.markdown("#### Th√¥ng S·ªë Giai ƒêo·∫°n 2")
n2_splines = st.sidebar.slider("S·ªë ƒë∆∞·ªùng cong spline cho ƒëi·ªÅu ch·ªânh cu·ªëi c√πng:", 3, 20, 9)
arc_equal_final = st.sidebar.checkbox("S·ª≠ d·ª•ng chu·∫©n h√≥a chi·ªÅu d√†i cung cho giai ƒëo·∫°n 2", False)

# Process button
process_button = st.sidebar.button("X·ª≠ L√Ω H√¨nh ·∫¢nh", type="primary")

# Create a placeholder for displaying results
result_container = st.container()

def plot_to_image(fig):
    """Convert a matplotlib figure to an image for Streamlit."""
    buf = BytesIO()
    fig.savefig(buf, format="png", bbox_inches='tight', pad_inches=0)
    buf.seek(0)
    return Image.open(buf)

# Process the image when the button is clicked
if process_button:
    with st.spinner("ƒêang x·ª≠ l√Ω h√¨nh ·∫£nh..."):
        try:
            # Create temporary file paths for outputs
            with tempfile.NamedTemporaryFile(delete=False, suffix='_intermediate.png') as tmp_file1:
                intermediate_path = tmp_file1.name
            
            with tempfile.NamedTemporaryFile(delete=False, suffix='_final.png') as tmp_file2:
                final_path = tmp_file2.name

            # Disable matplotlib's interactive mode to avoid showing the plots
            plt.ioff()
            
            # First stage processing (uncurve_text_tight)
            st.text("ƒêang ch·∫°y x·ª≠ l√Ω giai ƒëo·∫°n 1...")
            first_stage_figures = uncurve_text_tight(input_path, intermediate_path, n1_splines, arc_equal=arc_equal_tight, return_figures=True)
            
            # Second stage processing (uncurve_text)
            st.text("ƒêang ch·∫°y x·ª≠ l√Ω giai ƒëo·∫°n 2...")            
            second_stage_figures = uncurve_text(intermediate_path, final_path, n2_splines, arc_equal=arc_equal_final, return_figures=True)
            
            # Determine output filenames based on input source
            if image_source == "T·∫£i H√¨nh ·∫¢nh L√™n":
                base_name = os.path.splitext(uploaded_file.name)[0]
            else:
                base_name = os.path.splitext(selected_image)[0]
            
            # Create result directory if it doesn't exist
            result_dir = "result"
            os.makedirs(result_dir, exist_ok=True)
            
            # Define output paths in result directory
            intermediate_result_path = os.path.join(result_dir, f"{base_name}_output.png")
            final_result_path = os.path.join(result_dir, f"{base_name}_final.png")
            
            # Save results to result directory
            intermediate_image = cv2.imread(intermediate_path)
            cv2.imwrite(intermediate_result_path, intermediate_image)
            
            final_image = cv2.imread(final_path)
            cv2.imwrite(final_result_path, final_image)
            
            # Display the results
            with result_container:
                st.subheader("K·∫øt Qu·∫£ X·ª≠ L√Ω")
                
                # Stage 1 results
                st.markdown("### Giai ƒêo·∫°n 1: Ph√°t Hi·ªán ƒê∆∞·ªùng Cong VƒÉn B·∫£n")
                cols = st.columns(len(first_stage_figures))
                for i, (title, fig) in enumerate(first_stage_figures):
                    with cols[i]:
                        if title == "Text with Curve Detection":
                            title = "VƒÉn B·∫£n v·ªõi ƒê∆∞·ªùng Cong Ph√°t Hi·ªán"
                        elif title == "Perpendicular Sampling Lines":
                            title = "ƒê∆∞·ªùng L·∫•y M·∫´u Vu√¥ng G√≥c"
                        elif title == "First Stage Result":
                            title = "K·∫øt Qu·∫£ Giai ƒêo·∫°n 1"
                        st.image(plot_to_image(fig), caption=title)
                
                # Stage 2 results
                st.markdown("### Giai ƒêo·∫°n 2: CƒÉn Ch·ªânh Cu·ªëi C√πng")
                cols = st.columns(len(second_stage_figures))
                for i, (title, fig) in enumerate(second_stage_figures):
                    with cols[i]:
                        if title == "Second Stage Curve Detection":
                            title = "Ph√°t Hi·ªán ƒê∆∞·ªùng Cong Giai ƒêo·∫°n 2"
                        elif title == "Final Result":
                            title = "K·∫øt Qu·∫£ Cu·ªëi C√πng"
                        st.image(plot_to_image(fig), caption=title)
                  # Final result
                st.markdown("### K·∫øt Qu·∫£ Cu·ªëi C√πng")
                final_image_rgb = cv2.cvtColor(final_image, cv2.COLOR_BGR2RGB)
                st.image(final_image_rgb, caption="VƒÉn B·∫£n ƒê√£ ƒê∆∞·ª£c CƒÉn Ch·ªânh")
                
                # Success message and file paths
                st.success("X·ª≠ l√Ω ho√†n th√†nh! K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o th∆∞ m·ª•c result/")
                st.info(f"üìÅ K·∫øt qu·∫£ trung gian: `{intermediate_result_path}`")
                st.info(f"üìÅ K·∫øt qu·∫£ cu·ªëi c√πng: `{final_result_path}`")
                
                # DW Score Evaluation
                st.markdown("### üìä ƒê√°nh Gi√° Ch·∫•t L∆∞·ª£ng Dewarping (DW Score)")
                with st.spinner("ƒêang t√≠nh to√°n ƒëi·ªÉm DW..."):
                    try:
                        dw_score = calculate_dw_for_defined_pair(input_path, final_result_path, num_splines=n2_splines)
                        
                        if dw_score is not None:
                            # Create columns for DW score display
                            col1, col2, col3 = st.columns([1, 2, 1])
                            with col2:
                                st.metric(
                                    label="ƒêi·ªÉm DW (Dewarping Score)",
                                    value=f"{dw_score:.2f}%",
                                    delta=None
                                )
                            
                            # Interpretation of DW score
                            if dw_score >= 80:
                                st.success("üéâ Ch·∫•t l∆∞·ª£ng r·∫•t t·ªët! VƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c l√†m th·∫≥ng hi·ªáu qu·∫£.")
                            elif dw_score >= 60:
                                st.info("üëç Ch·∫•t l∆∞·ª£ng t·ªët. VƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c c·∫£i thi·ªán ƒë√°ng k·ªÉ.")
                            elif dw_score >= 40:
                                st.warning("‚ö†Ô∏è Ch·∫•t l∆∞·ª£ng trung b√¨nh. C√≥ th·ªÉ c·∫ßn ƒëi·ªÅu ch·ªânh tham s·ªë.")
                            else:
                                st.error("‚ùå Ch·∫•t l∆∞·ª£ng th·∫•p. Khuy·∫øn ngh·ªã th·ª≠ c√°c tham s·ªë kh√°c.")
                            
                            # Explanation
                            with st.expander("‚ÑπÔ∏è Gi·∫£i th√≠ch v·ªÅ ƒëi·ªÉm DW"):
                                st.markdown("""
                                **ƒêi·ªÉm DW (Dewarping Score)** ƒëo l∆∞·ªùng hi·ªáu qu·∫£ c·ªßa vi·ªác l√†m th·∫≥ng vƒÉn b·∫£n:
                                
                                - **100%**: Ho√†n h·∫£o - vƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c l√†m th·∫≥ng ho√†n to√†n
                                - **80-99%**: R·∫•t t·ªët - ch·∫•t l∆∞·ª£ng cao
                                - **60-79%**: T·ªët - ch·∫•p nh·∫≠n ƒë∆∞·ª£c
                                - **40-59%**: Trung b√¨nh - c·∫ßn c·∫£i thi·ªán
                                - **0-39%**: Th·∫•p - c·∫ßn ƒëi·ªÅu ch·ªânh tham s·ªë
                                
                                ƒêi·ªÉm s·ªë ƒë∆∞·ª£c t√≠nh d·ª±a tr√™n vi·ªác so s√°nh ƒë·ªô cong c·ªßa vƒÉn b·∫£n tr∆∞·ªõc v√† sau khi x·ª≠ l√Ω.
                                """)
                        else:
                            st.error("‚ùå Kh√¥ng th·ªÉ t√≠nh to√°n ƒëi·ªÉm DW. C√≥ th·ªÉ do l·ªói ƒë·ªçc file ho·∫∑c ƒë·ªãnh d·∫°ng ·∫£nh.")
                    
                    except Exception as e:
                        st.error(f"‚ùå L·ªói khi t√≠nh to√°n ƒëi·ªÉm DW: {str(e)}")
                
                # Download buttons (optional - for convenience)
                st.markdown("### üì• T·∫£i Xu·ªëng K·∫øt Qu·∫£")
                col1, col2 = st.columns(2)
                with col1:
                    # Create a BytesIO object for the intermediate result
                    buf_intermediate = BytesIO()
                    Image.fromarray(cv2.cvtColor(intermediate_image, cv2.COLOR_BGR2RGB)).save(buf_intermediate, format="PNG")
                    buf_intermediate.seek(0)
                    st.download_button(
                        label="üì• T·∫£i K·∫øt Qu·∫£ Trung Gian",
                        data=buf_intermediate,
                        file_name=f"{base_name}_output.png",
                        mime="image/png"
                    )
                
                with col2:
                    # Create a BytesIO object for the final result
                    buf_final = BytesIO()
                    Image.fromarray(cv2.cvtColor(final_image, cv2.COLOR_BGR2RGB)).save(buf_final, format="PNG")
                    buf_final.seek(0)
                    st.download_button(
                        label="üì• T·∫£i K·∫øt Qu·∫£ Cu·ªëi C√πng",
                        data=buf_final,
                        file_name=f"{base_name}_final.png",
                        mime="image/png"
                    )            
            # Clean up temporary files
            try:
                os.unlink(intermediate_path)
                os.unlink(final_path)
                # No need to delete uploaded images as they are saved in images/ folder
            except:
                pass  # Ignore cleanup errors
            plt.close('all')
            
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω: {str(e)}")
            st.exception(e)
else:
    with result_container:
        st.info("Nh·∫•p 'X·ª≠ L√Ω H√¨nh ·∫¢nh' ƒë·ªÉ b·∫Øt ƒë·∫ßu cƒÉn ch·ªânh vƒÉn b·∫£n.")

# Footer
st.markdown("---")
st.markdown("C√¥ng C·ª• Ch·ªânh S·ª≠a VƒÉn B·∫£n Cong - ƒê∆∞·ª£c t·∫°o v·ªõi ‚ù§Ô∏è s·ª≠ d·ª•ng Streamlit")
